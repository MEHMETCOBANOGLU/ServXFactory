# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
    # Dart SDK'yı kur
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603


      # Bağımlılıkları yükle
      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      # Kod analizini çalıştır
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
           # Testleri çalıştır
      - name: Run tests
        run: dart test

         # GEMINI_API_KEY'i kullan
      - name: Use GEMINI_API_KEY
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINIAPIKEY }}
        run: |
          echo "Using GEMINI_API_KEY: $GEMINI_API_KEY"
          # Örnek bir Dart dosyası çalıştırma
          # dart run lib/main.dart --api-key=$GEMINI_API_KEY
